from platform import system
from os import listdir
try:
    from collections import OrderedDict
except ImportError:
    # python 2.6 or earlier, use backport
    from ordereddict import OrderedDict
from subprocess import call

import os

dist_type = 2 #1: all, 2: lean, 3: grb
is_debug = True;
suffix = ""
if(is_debug):
    suffix = "d"
    print("DEBUG")
else:
    print("RELEASE")
print("System is "+ system());

def validateLibrary(libraryName, exclude):
    """ Search in the libpath of the current platform if the library is present """
    if module in exclude:
        print(module+"-"+mod+" excluded")
        return False;
    for folder in libpath[system()]:
        for file in listdir(folder):
            if (libraryName + "." in file):
                return True
    return True# False

cpppath = {
    "Linux": [r"/opt/ibm/ILOG/CPLEX_Studio126/cplex/include",
              os.environ['HOME']+"/source/gurobi510/linux64/include",
              r"/usr/local/include/",
	          r"//usr/include/coin/"],
    "Windows": [],
    "Darwin": [os.environ['HOME']+"/Applications/IBM/ILOG/CPLEX_Studio126/cplex/include",
              r"/Library/gurobi560/mac64/include",
              r"/usr/local/Cellar/octave/3.8.0/include/octave-3.8.0",
              r"/Users/mbouchard/source/scipoptsuite-3.0.2/scip-3.0.2/src/",
              r"/usr/local/Cellar/cbc/2.8.6/include/coin/",
              r"/usr/local/Cellar/cgl/0.58.3/include/coin/"]
    }
        
libpath = {
    "Linux": [#r"/opt/ibm/ILOG/CPLEX_Studio126/cplex/bin/x86-64_sles10_4.1/",
              #os.environ['HOME']+"/source/gurobi510/linux64/lib",
              r"/usr/local/lib/"],
    "Windows": [],
    "Darwin": [os.environ['HOME']+"/Applications/IBM/ILOG/CPLEX_Studio126/cplex/lib/x86-64_osx/static_pic",
               r"/Library/gurobi560/mac64/lib",
               r"/Users/mbouchard/source/scipoptsuite-3.0.2/scip-3.0.2/lib/"]
    }

cppdefines = []
if (system() == "Windows"):
   cppdefines.append("WIN64")
elif (system() == "Linux"):
   cppdefines.append("Linux")
elif (system() == "Darwin"):
   cppdefines.append("Darwin")

libs = ["c"]
if (system() == "Linux"):
   libs = ["pthread", "m", "crypt", "dl", "c"]

# Validate that the libs are present
moduleLibs = {
    "Cplex": {
        "Linux": ["cplex126"],
        "Windows": ["cplex126"],
        "Darwin": ["cplex"]
        },
    "Gurobi": {
        "Linux": ["gurobi_c++", "gurobi51"],
        "Windows": ["gurobi_c++md2012", "gurobi56"],
        "Darwin": ["gurobi_c++", "gurobi56"]
        },
    "HyperGraph": {
        "Linux": ["cplex126"],
        "Windows": ["cplex126"],
        "Darwin": ["cplex"]
        },
    "Glpk": {
        "Linux": ["glpk"],
        "Windows": ["glpk_4_52"],
        "Darwin": ["glpk"]
        },
    "Scip": {
        "Linux": ["scip", "objscip", "libsoplex.darwin.x86_64.gnu.opt.a", "z", "lpispx", "nlpi.cppad", "zimpl.darwin.x86_64.gnu.opt", "readline", "gmp"],
        "Windows": ["scip", "objscip", "libsoplex.darwin.x86_64.gnu.opt.a", "z", "lpispx", "nlpi.cppad", "zimpl.darwin.x86_64.gnu.opt", "readline", "gmp"],
        "Darwin": ["scip", "objscip", "libsoplex.darwin.x86_64.gnu.opt.a", "z", "lpispx", "nlpi.cppad", "zimpl.darwin.x86_64.gnu.opt", "readline", "gmp"]
        },
    "Osi": {
        "Linux": ["Clp", "Cbc", "Cgl", "Osi", "OsiClp", "CoinUtils"],
        "Windows": ["Clp", "Osi", "OsiClp", "CoinUtils"],
        "Darwin": ["Clp", "Cgl", "Cbc", "Osi", "OsiClp", "CoinUtils"]
        }
    }

########################################################################################
missingModules = []
excludedModules = []
if dist_type == 1:
    excludedModules = ["Gurobi"]
elif dist_type == 2:
    excludedModules = ["Gurobi","HyperGraph","Scip","Glpk"]
    if (system() == "Linux"):
        excludedModules = ["Gurobi","HyperGraph","Scip","Glpk","Cplex"]
elif dist_type == 3:
    excludedModules = ["HyperGraph","Glpk","Osi","Scip","Cplex"]

for module in moduleLibs:
    allModulePresents = True

    for mod in moduleLibs[module][system()]:
        if (not validateLibrary(mod,excludedModules)):
            allModulePresents = False
    if (allModulePresents):
        libs += moduleLibs[module][system()]
        cppdefines.append((module + "_MODULE").upper())
    else:
        missingModules.append(module)

libs = list(OrderedDict.fromkeys(libs))

# linux flags
# -g : debug info flag
# -O# : optimization flag
# -m64 : force 64 bits in the linker
# -Wall : enables all the warnings
# -fmessage-length : format the compiler message
# -std=c++11 : c++ version flag
# -pthread : changes the way some libc headers work for multithread
cxxflags = {
    "Linux": "-g -O2 -Wall -pthread -fmessage-length=0 -fPIC", # -std=c++11",
    "Windows": "/O2 /MD /EHsc",
    "Darwin": "-g -O2 -m64 -Wall -pthread -fmessage-length=0 -fPIC -std=c++11",
    }
    
# Create an environmnet

compiler = "g++"
if dist_type == 3:
    compiler = "g++-4.6"

env = Environment(TARGET_ARCH = "x86_64",
    CPPPATH = cpppath[system()],
    LIBPATH = libpath[system()],
    LIBS = libs,
    CXXFLAGS = cxxflags[system()],
    CPPDEFINES = cppdefines,
    CXX = compiler
    )

# Change the build folder output
#env.VariantDir("build-release", "src", duplicate = 0)

cppfiles = Glob("*.cpp")
cfiles = Glob("*.c")
files = cppfiles+cfiles
if (system() == "Windows"):
    files += ["GenModelInterface.def"]
    target = "genmodel"+suffix
elif (system() == "Linux"):
    target = "genmodel"+suffix
elif (system() == "Darwin"):
    target = "genmodel"+suffix

# Remove the cpp files for the missing solvers
filesToRemove = []
if (not env.GetOption("clean")):
    for file in files:
        for module in missingModules:
            if module in str(file):
                filesToRemove.append(file)

for file in filesToRemove:
    print(file)
    files.remove(file)
    
matches = [file for file in files if "GenModelOctave.cpp" in str(file)]
for file in matches:
    print("Removing "+str(file))
    files.remove(file)
    
matches = [file for file in files if "Test.cpp" in str(file)]
for file in matches:
    print("Removing "+str(file))
    files.remove(file)
    
# Build the library
print("building library...")
env.SharedLibrary(target = "../lib/" + target, source = files)
print("done")

print("building test program")
env["LIBPATH"].append("../lib")
test_libs_list = list(env["LIBS"])
test_libs_list.append("genmodeld")
env.Program(target = "../bin/testd", source = "Test.cpp", LIBS=test_libs_list)
print("done")

if (missingModules):
    print("***************************************************************************")
    print("****** The following modules will not compiled into the final library *****")
    print(missingModules)
    print("***************************************************************************")
