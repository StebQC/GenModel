# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_genmodel', [dirname(__file__)])
        except ImportError:
            import _genmodel
            return _genmodel
        if fp is not None:
            try:
                _mod = imp.load_module('_genmodel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _genmodel = swig_import_helper()
    del swig_import_helper
else:
    import _genmodel
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genmodel.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genmodel.delete_IntVector
    __del__ = lambda self : None;
    def SetSize(self, *args): return _genmodel.IntVector_SetSize(self, *args)
    def Delete(self): return _genmodel.IntVector_Delete(self)
    def Set(self, *args): return _genmodel.IntVector_Set(self, *args)
    def Get(self, *args): return _genmodel.IntVector_Get(self, *args)
    def Ptr(self): return _genmodel.IntVector_Ptr(self)
IntVector_swigregister = _genmodel.IntVector_swigregister
IntVector_swigregister(IntVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genmodel.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genmodel.delete_LongVector
    __del__ = lambda self : None;
    def SetSize(self, *args): return _genmodel.LongVector_SetSize(self, *args)
    def Delete(self): return _genmodel.LongVector_Delete(self)
    def Set(self, *args): return _genmodel.LongVector_Set(self, *args)
    def Get(self, *args): return _genmodel.LongVector_Get(self, *args)
    def Ptr(self): return _genmodel.LongVector_Ptr(self)
LongVector_swigregister = _genmodel.LongVector_swigregister
LongVector_swigregister(LongVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _genmodel.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genmodel.delete_DoubleVector
    __del__ = lambda self : None;
    def SetSize(self, *args): return _genmodel.DoubleVector_SetSize(self, *args)
    def Delete(self): return _genmodel.DoubleVector_Delete(self)
    def Set(self, *args): return _genmodel.DoubleVector_Set(self, *args)
    def Get(self, *args): return _genmodel.DoubleVector_Get(self, *args)
    def Ptr(self): return _genmodel.DoubleVector_Ptr(self)
DoubleVector_swigregister = _genmodel.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)


def WriteProblemToLpFile(*args):
  return _genmodel.WriteProblemToLpFile(*args)
WriteProblemToLpFile = _genmodel.WriteProblemToLpFile

def AddConst(*args):
  return _genmodel.AddConst(*args)
AddConst = _genmodel.AddConst

def AddConstBulk(*args):
  return _genmodel.AddConstBulk(*args)
AddConstBulk = _genmodel.AddConstBulk

def AddVar(*args):
  return _genmodel.AddVar(*args)
AddVar = _genmodel.AddVar

def AddVarBulk(*args):
  return _genmodel.AddVarBulk(*args)
AddVarBulk = _genmodel.AddVarBulk

def AddNz(*args):
  return _genmodel.AddNz(*args)
AddNz = _genmodel.AddNz

def AddNzToLast(*args):
  return _genmodel.AddNzToLast(*args)
AddNzToLast = _genmodel.AddNzToLast

def AddNzBulk(*args):
  return _genmodel.AddNzBulk(*args)
AddNzBulk = _genmodel.AddNzBulk

def SetQpCoef(*args):
  return _genmodel.SetQpCoef(*args)
SetQpCoef = _genmodel.SetQpCoef

def SetNumbers(*args):
  return _genmodel.SetNumbers(*args)
SetNumbers = _genmodel.SetNumbers

def SetLongParam(*args):
  return _genmodel.SetLongParam(*args)
SetLongParam = _genmodel.SetLongParam

def SetDblParam(*args):
  return _genmodel.SetDblParam(*args)
SetDblParam = _genmodel.SetDblParam

def SetBoolParam(*args):
  return _genmodel.SetBoolParam(*args)
SetBoolParam = _genmodel.SetBoolParam

def SetStrParam(*args):
  return _genmodel.SetStrParam(*args)
SetStrParam = _genmodel.SetStrParam

def CreateNewModel(*args):
  return _genmodel.CreateNewModel(*args)
CreateNewModel = _genmodel.CreateNewModel

def CopyOrder(*args):
  return _genmodel.CopyOrder(*args)
CopyOrder = _genmodel.CopyOrder

def DeleteModel(*args):
  return _genmodel.DeleteModel(*args)
DeleteModel = _genmodel.DeleteModel

def CreateModel(*args):
  return _genmodel.CreateModel(*args)
CreateModel = _genmodel.CreateModel

def SolveModel(*args):
  return _genmodel.SolveModel(*args)
SolveModel = _genmodel.SolveModel

def GetSolVars(*args):
  return _genmodel.GetSolVars(*args)
GetSolVars = _genmodel.GetSolVars

def HasSolution(*args):
  return _genmodel.HasSolution(*args)
HasSolution = _genmodel.HasSolution

def GetDualPrices(*args):
  return _genmodel.GetDualPrices(*args)
GetDualPrices = _genmodel.GetDualPrices

def GetReducedCosts(*args):
  return _genmodel.GetReducedCosts(*args)
GetReducedCosts = _genmodel.GetReducedCosts

def GetRowValues(*args):
  return _genmodel.GetRowValues(*args)
GetRowValues = _genmodel.GetRowValues

def GetObjCoef(*args):
  return _genmodel.GetObjCoef(*args)
GetObjCoef = _genmodel.GetObjCoef

def GetBounds(*args):
  return _genmodel.GetBounds(*args)
GetBounds = _genmodel.GetBounds

def GetRHS(*args):
  return _genmodel.GetRHS(*args)
GetRHS = _genmodel.GetRHS

def SetRHS(*args):
  return _genmodel.SetRHS(*args)
SetRHS = _genmodel.SetRHS

def GetSense(*args):
  return _genmodel.GetSense(*args)
GetSense = _genmodel.GetSense

def SetSense(*args):
  return _genmodel.SetSense(*args)
SetSense = _genmodel.SetSense

def GetObjVal(*args):
  return _genmodel.GetObjVal(*args)
GetObjVal = _genmodel.GetObjVal

def ChangeBulkBounds(*args):
  return _genmodel.ChangeBulkBounds(*args)
ChangeBulkBounds = _genmodel.ChangeBulkBounds

def ChangeBulkObjectives(*args):
  return _genmodel.ChangeBulkObjectives(*args)
ChangeBulkObjectives = _genmodel.ChangeBulkObjectives

def DeleteMipStarts(*args):
  return _genmodel.DeleteMipStarts(*args)
DeleteMipStarts = _genmodel.DeleteMipStarts

def GetMIPRelativeGap(*args):
  return _genmodel.GetMIPRelativeGap(*args)
GetMIPRelativeGap = _genmodel.GetMIPRelativeGap
# This file is compatible with both classic and new-style classes.


